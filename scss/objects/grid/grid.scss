/** @define grid */

@import 'variables';

// Grid
//
// Grid system based on flexbox for building complex layouts.
//
// .grid--inline  - Enables inline flex diplay on grid container.
// .grid--right   - Aligns grid columns horizontally to the right.
// .grid--center  - Aligns grid columns horizontally to the center.
// .grid--justify - Distributes grid columns horizontally with equals inner spaces.
// .grid--space   - Distributes grid columns horizontally with equals inner and outer spaces.
// .grid--start   - Aligns grid columns verically to the start.
// .grid--middle  - Aligns grid columns verically to the center.
// .grid--end     - Aligns grid columns verically to the end.
// .grid--stretch - Stretches grid columns to the euqal height.
// .grid--gapless - Removes grid gutters.
// .grid--waffle  - Adds gutter on all sides of grid columns.
// .grid--nowrap  - Forces columns to stay in single row.
// .grid--reverse - Reverses order of grid columns.
// .grid--stack   - Changes grid columns direction from horizontal to vartical.
//
// Markup: objects/grid/html/grid.html
//
// Style guide: Objects.Grid
.grid {
  $this: &;

  display: flex;
  flex-wrap: wrap;

  @each $breakpoint, $width in $grid-gutters {
    @if ($breakpoint == $grid-gutter) {
      margin-left: -#{$width / 2};
      margin-right: -#{$width / 2};
    }

    @else {
      @include breakpoint($breakpoint up) {
        margin-left: -#{$width / 2};
        margin-right: -#{$width / 2};
      }
    }
  }

  // Grid Column
  //
  // Column element of grid block. Divides space into cells called "columns".
  //
  // .grid__column--1        - Makes column a size of 1 by 12 of available space.
  // .grid__column--2        - Makes column a size of 2 by 12 of available space.
  // .grid__column--3        - Makes column a size of 3 by 12 of available space.
  // .grid__column--4        - Makes column a size of 4 by 12 of available space.
  // .grid__column--5        - Makes column a size of 5 by 12 of available space.
  // .grid__column--6        - Makes column a size of 6 by 12 of available space.
  // .grid__column--7        - Makes column a size of 7 by 12 of available space.
  // .grid__column--8        - Makes column a size of 8 by 12 of available space.
  // .grid__column--9        - Makes column a size of 9 by 12 of available space.
  // .grid__column--10       - Makes column a size of 10 by 12 of available space.
  // .grid__column--11       - Makes column a size of 11 by 12 of available space.
  // .grid__column--12       - Makes column a size of 12 by 12 of available space.
  // .grid__column--shrink   - Column adjust to the size of its content.
  // .grid__column--start    - Aligns specific column to the start of the flex.
  // .grid__column--center   - Aligns specific column to the center of the flex.
  // .grid__column--end      - Aligns specific column to the end of the flex.
  // .grid__column--baseline - Aligns specific column to the baseline.
  // .grid__column--stretch  - Force column to expand verticali to the size of other columns.
  //
  // Markup: objects/grid/html/grid__column.html
  //
  // Style guide: Objects.Grid.Column
  &__column {
    flex: 1;
    max-width: 100%;

    @each $breakpoint, $width in $grid-gutters {
      @if ($breakpoint == $grid-gutter) {
        padding-left: $width / 2;
        padding-right: $width / 2;
      }

      @else {
        @include breakpoint($breakpoint up) {
          padding-left: $width / 2;
          padding-right: $width / 2;
        }
      }
    }

    @for $i from 1 through $grid-columns {
      &--#{$i} {
        flex-basis: percentage($i / $grid-columns);
        max-width: percentage($i / $grid-columns);
      }
    }

    @each $breakpoint, $width in $grid-sizes {
      @include breakpoint($breakpoint up) {
        @for $i from 1 through $grid-columns {
          &--#{$i}\@#{$breakpoint} {
            flex-basis: percentage($i / $grid-columns);
            max-width: percentage($i / $grid-columns);
          }
        }
      }
    }

    &--shrink {
      flex: 0 1 auto;

      @each $breakpoint, $width in $grid-sizes {
        @include breakpoint($breakpoint up) {
          &\@#{$breakpoint} {
            flex: 0 1 auto;
          }
        }
      }
    }

    &--start {
      align-self: flex-end;
    }

    &--center {
      align-self: center;
    }

    &--end {
      align-self: flex-end;
    }

    &--baseline {
      align-self: baseline;
    }

    &--stretch {
      align-self: stretch;
    }
  }

  &--inline {
    display: inline-flex;
  }

  &--start {
    justify-content: flex-start;
  }

  &--center {
    justify-content: center;
  }

  &--end {
    justify-content: flex-end;
  }

  &--justify {
    justify-content: space-between;
  }

  &--space {
    justify-content: space-around;
  }

  &--middle {
    align-items: center;
  }

  &--bottom {
    align-items: flex-end;
  }

  &--stretch {
    align-items: stretch;
  }

  &--nowrap {
    flex-wrap: wrap;
  }

  &--stack {
    flex-direction: column;
  }

  &--reverse {
    flex-direction: row-reverse;

    &#{$this}--stack {
      flex-direction: column-reverse;
    }

    @each $breakpoint, $width in $grid-sizes {
      @include breakpoint($breakpoint up) {
        &\@#{$breakpoint} {
          flex-direction: row-reverse;

          &#{$this}--stack {
            flex-direction: column-reverse;
          }
        }
      }
    }
  }

  &--gapless {
    margin-left: 0;
    margin-right: 0;

    & > #{$this}__column {
      padding-left: 0;
      padding-right: 0;
    }
  }

  &--waffle {
    @each $breakpoint, $width in $grid-gutters {
      @if ($breakpoint == $grid-gutter) {
        margin: -#{$width / 2};
      }

      @else {
        @include breakpoint($breakpoint up) {
          margin: -#{$width / 2};
        }
      }
    }

    #{$this}__column {
      @each $breakpoint, $width in $grid-gutters {
        @if ($breakpoint == $grid-gutter) {
          padding: $width / 2;
        }

        @else {
          @include breakpoint($breakpoint up) {
            padding: $width / 2;
          }
        }
      }
    }
  }
}
