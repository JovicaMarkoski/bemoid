/** @define grid */

@import 'variables';

// Grid
//
// Grid system based on flexbox for building complex layouts.
//
// .grid--right        - Aligns grid columns horizontally to the right.
// .grid--center       - Aligns grid columns horizontally to the center.
// .grid--justify      - Distributes grid columns horizontally with equals inner spaces.
// .grid--space        - Distributes grid columns horizontally with equals inner and outer spaces.
// .grid--middle       - Aligns grid columns verically to the center.
// .grid--bottom       - Aligns grid columns verically to the bottom.
// .grid--stretch      - Stretches grid columns to the euqal height.
// .grid--gapless      - Removes grid gutters.
// .grid--waffle       - Adds gutter on all sides of grid columns.
// .grid--nowrap       - Forces columns to stay in single row.
// .grid--reverse      - Reverses order of grid columns.
// .grid--reverseable  - Reverses order of grid columns on specified breakpoint defined in `$grid-reversable` variable.
// .grid--stack        - Changes grid columns direction from horizontal to vartical.
// .grid--stackable    - Makes grid columns to stack on specified breakpoint defined in `$grid-stackable` variable.
//
// Markup: objects/grid/html/grid.html
//
// Style guide: Objects.Grid
.grid {
  $this: &;

  display: flex;
  flex-wrap: wrap;

  @each $breakpoint, $width in $grid-gutters {
    @if ($breakpoint == $grid-gutter) {
      margin-left: -#{$width / 2};
      margin-right: -#{$width / 2};
    }

    @else {
      @include breakpoint($breakpoint up) {
        margin-left: -#{$width / 2};
        margin-right: -#{$width / 2};
      }
    }
  }

  // Grid Column
  //
  // Column element of grid block. Divides space into cells called "columns".
  //
  // .grid__column--1 - Desc
  // .grid__column--2 - Desc
  // .grid__column--3 - Desc
  // .grid__column--4 - Desc
  // .grid__column--5 - Desc
  // .grid__column--6 - Desc
  // .grid__column--7 - Desc
  // .grid__column--8 - Desc
  // .grid__column--9 - Desc
  // .grid__column--10 - Desc
  // .grid__column--11 - Desc
  // .grid__column--12 - Desc
  // .grid__column--shrink - Desc
  // .grid__column--middle - Desc
  // .grid__column--bottom - Desc
  // .grid__column--baseline - Desc
  // .grid__column--stretch - Desc
  //
  // Markup: objects/grid/html/grid__column.html
  //
  // Style guide: Objects.Grid.Column
  &__column {
    flex: 1;
    max-width: 100%;

    @each $breakpoint, $width in $grid-gutters {
      @if ($breakpoint == $grid-gutter) {
        padding-left: $width / 2;
        padding-right: $width / 2;
      }

      @else {
        @include breakpoint($breakpoint up) {
          padding-left: $width / 2;
          padding-right: $width / 2;
        }
      }
    }

    @for $i from 1 through $grid-columns {
      &--#{$i} {
        flex-basis: percentage($i / $grid-columns);
        max-width: percentage($i / $grid-columns);
      }
    }

    @each $breakpoint, $width in $grid-sizes {
      @include breakpoint($breakpoint up) {
        @for $i from 1 through $grid-columns {
          &--#{$i}\@#{$breakpoint} {
            flex-basis: percentage($i / $grid-columns);
            max-width: percentage($i / $grid-columns);
          }
        }
      }
    }

    &--shrink {
      flex: 0 1 auto;
    }

    &--middle {
      align-self: center;
    }

    &--bottom {
      align-self: flex-end;
    }

    &--baseline {
      align-self: baseline;
    }

    &--stretch {
      align-self: stretch;
    }
  }

  &--right {
    justify-content: flex-end;
  }

  &--center {
    justify-content: center;
  }

  &--justify {
    justify-content: space-between;
  }

  &--space {
    justify-content: space-around;
  }

  &--middle {
    align-items: center;
  }

  &--bottom {
    align-items: flex-end;
  }

  &--stretch {
    align-items: stretch;
  }

  &--nowrap {
    flex-wrap: wrap;
  }

  &--stack {
    flex-direction: column;
  }

  &--stackable {
    @include breakpoint($grid-stackable down) {
      flex-direction: column;

      & > #{$this}__column {
        flex-basis: auto;
        max-width: 100%;
      }
    }
  }

  &--reverse {
    flex-direction: row-reverse;

    &#{$this}--stack {
      flex-direction: column-reverse;
    }

    &#{$this}--stackable {
      @include breakpoint($grid-stackable down) {
        flex-direction: column-reverse;
      }
    }
  }

  &--reversable {
    @include breakpoint($grid-reversable down) {
      flex-direction: row-reverse;
    }

    &#{$this}--stack {
      @include breakpoint($grid-reversable down) {
        flex-direction: column-reverse;
      }
    }

    &#{$this}--stackable {
      @include breakpoint($grid-reversable down) {
        flex-direction: column-reverse;
      }
    }
  }

  &--gapless {
    margin-left: 0;
    margin-right: 0;

    & > #{$this}__column {
      padding-left: 0;
      padding-right: 0;
    }
  }

  &--waffle {
    @each $breakpoint, $width in $grid-gutters {
      @if ($breakpoint == $grid-gutter) {
        margin: -#{$width / 2};
      }

      @else {
        @include breakpoint($breakpoint up) {
          margin: -#{$width / 2};
        }
      }
    }

    #{$this}__column {
      @each $breakpoint, $width in $grid-gutters {
        @if ($breakpoint == $grid-gutter) {
          padding: $width / 2;
        }

        @else {
          @include breakpoint($breakpoint up) {
            padding: $width / 2;
          }
        }
      }
    }
  }
}
