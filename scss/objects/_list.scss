////
/// @group List
/// @define list
////

/// Size of space between list items.
///
/// @type {Value|Values}
$list-spaces: get-space(xsmall) !default;

/// Size of lis item left margin.
///
/// @type {Value|Values}
$list-margins: get-space(small) !default;

/// Size of list left padding.
///
/// @type {Value|Values}
$list-paddings: get-space(medium) !default;

/// Symbol for bulleted list.
///
/// @type {String}
$list-symbol-bulleted: "â€¢" !default;

/// Symbol for ordered list.
///
/// @type {String}
$list-symbol-ordered: "." !default;

// List
//
// Grid system based on flexbox for building complex layouts.
//
// .list--inline - Desc
// .list--inline.list--bulleted - Desc
// .list--inline.list--ordered - Desc
// .list--bulleted - Desc
// .list--ordered - Desc
//
// Markup: list.html
//
// Style guide: Objects.List
.list {
    $this: #{&};

    display: block;
    margin-top: 0;
    margin-bottom: 0;
    padding-left: 0;
    list-style-type: none;

    & > * + * {
        margin: $list-spaces 0 0 0;
    }

    #{$this} {
        margin-top: $list-spaces;
        padding-left: $list-paddings;
    }

    // List Item
    //
    // Grid system based on flexbox for building complex layouts.
    //
    // Style guide: Objects.List.Item
    &__item {
        display: list-item;
        list-style-type: none;
        list-style-position: outside;
    }

    &--inline {
        display: inline-block;

        & > * + * {
            margin: 0 0 0 $list-spaces;
        }

        #{$this}__item {
            display: inline-block;
        }
    }

    &--bulleted,
    &--ordered {
        #{$this}__item {
            &:before {
                user-select: none;
                pointer-events: none;
                margin-right: $list-margins;
            }
        }
    }

    &--bulleted {
        #{$this}__item {
            &:before {
                content: $list-symbol-bulleted;
            }
        }
    }

    &--ordered {
        &,
        #{$this} {
            counter-reset: o;
        }

        #{$this}__item {
            &:before {
                counter-increment: o;
                content: counters(o, $list-symbol-ordered);
            }
        }
    }
}