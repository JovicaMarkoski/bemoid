/** @define button */

@import 'variables';

// Button
//
// Component for creating a standard clickable buttons.
//
// .button--disable  - Turns on disable state on a button.
// .button--wide      - Gives button larger horizontal paddings.
// .button--expand  - Expands button to fullwidth.
// .button--xsmall    - Xsmall variant of a button.
// .button--small     - Small variant of a button.
// .button--large     - Large variant of a button.
// .button--xlarge    - Xlarge variant of a button.
// .button--primary   - Primary variant of a button.
// .button--secondary - Secondary variant of a button.
// .button--success   - Success variant of a button.
// .button--warning   - Warning variant of a button.
// .button--info      - Info variant of a button.
// .button--error     - Error variant of a button.
// .button--hollow  - Hollowed variant of a button. Makes button background transparent.
// .button--hollow.button--primary   - Primary variant of a hollowed button.
// .button--hollow.button--secondary - Secondary variant of a hollowed button.
// .button--hollow.button--success   - Success variant of a hollowed button.
// .button--hollow.button--warning   - Warning variant of a hollowed button.
// .button--hollow.button--info      - Info variant of a hollowed button.
// .button--hollow.button--error     - Error variant of a hollowed button.
//
// Markup: components/button/html/button.html
//
// Styleguide: Components.Button
.button {
  $this: &;

  $size: map-get($button-sizes, $button-size);
  $variant: map-get($button-variants, $button-variant);

  position: relative;
  cursor: pointer;
  display: inline-block;
  vertical-align: middle;
  line-height: inherit;
  text-decoration: none;
  outline: 0;
  font-weight: $button-weight;
  text-align: $button-align;
  border: $button-hollow-border solid transparent;

  @include declarations($size);
  @include declarations-mutable($variant);

  &:hover,
  &:focus,
  &:active {
    @include declarations-mutable($variant, true);
  }

  // Button Cover
  //
  // Covers button with additional content. Useful for providing loading state or change button text.
  //
  // Markup: components/button/html/button__cover.html
  //
  // Style guide: Components.Button.Cover
  &__cover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    opacity: 0;
    color: map-get($variant, 'color');
  }

  // Button Icon
  //
  // Icon element which aligns icons inside button.
  //
  // Markup: components/button/html/button__icon.html
  //
  // Style guide: Components.Button.Icon
  &__icon {
    display: inline-block;

    @at-root {
      img#{$this}__icon,
      svg#{$this}__icon {
        vertical-align: sub;
      }
    }
  }

  @each $size, $declarations in $button-sizes {
    @if $size != $button-size {
      &--#{$size} {
        @include declarations($declarations);
      }
    }
  }

  @each $variant, $declarations in $button-variants {
    @if $variant != $button-variant {
      &--#{$variant} {
        $color: map-get($declarations, 'color');

        @include declarations-mutable($declarations);

        &:hover,
        &:focus,
        &:active {
          @include declarations-mutable($declarations, true);

          #{$this}__cover {
            color: nth($color, length($color));
          }
        }

        #{$this}__cover {
          color: nth($color, 1);
        }
      }
    }
  }

  &--hollow {
    $variant: map-get($button-hollow-variants, $button-hollow-variant);

    border-width: $button-hollow-border;
    border-style: solid;
    background-color: $button-hollow-background;

    @include declarations-mutable($variant);

    &:hover,
    &:focus,
    &:active {
      background-color: $button-hollow-background;

      @include declarations-mutable($variant, true);
    }

    @each $variant, $declarations in $button-hollow-variants {
      @if $variant != $button-hollow-variant {
        &#{$this}--#{$variant} {
          $color: map-get($declarations, 'color');

          @include declarations-mutable($declarations);

          &:hover,
          &:focus,
          &:active {
            @include declarations-mutable($declarations, true);

            #{$this}__cover {
              color: nth($color, length($color));
            }
          }

          #{$this}__cover {
            color: nth($color, 1);
          }
        }
      }
    }
  }

  &--wide {
    padding-left: $button-wide-padding;
    padding-right: $button-wide-padding;
  }

  &--expand {
    display: block;
    width: 100%;
  }

  &--cover {
    cursor: initial;
    color: transparent !important;

    #{$this}__cover {
      opacity: 1;
    }
  }

  &--curtain {
    &:hover,
    &:focus,
    &:active {
      color: transparent !important;

      #{$this}__cover {
        opacity: 1;
      }
    }
  }

  &:disabled,
  &--disable {
    cursor: default;
    opacity: $button-disabled-opacity;
    pointer-events: none;
    background-image: none;
  }
}
